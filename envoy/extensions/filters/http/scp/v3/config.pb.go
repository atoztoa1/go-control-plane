// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: envoy/extensions/filters/http/scp/v3/config.proto

package envoy_extensions_filters_http_scp_v3

import (
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/go-control-plane/envoy/config/route/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type R16Inbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqTimeout       uint32   `protobuf:"varint,1,opt,name=req_timeout,json=reqTimeout,proto3" json:"req_timeout,omitempty"`
	MsgRetry         uint32   `protobuf:"varint,2,opt,name=msg_retry,json=msgRetry,proto3" json:"msg_retry,omitempty"`
	MsgRetryCodeList []string `protobuf:"bytes,3,rep,name=msg_retry_code_list,json=msgRetryCodeList,proto3" json:"msg_retry_code_list,omitempty"`
	JwkFqdn          string   `protobuf:"bytes,4,opt,name=jwk_fqdn,json=jwkFqdn,proto3" json:"jwk_fqdn,omitempty"`
	TokenHdl         string   `protobuf:"bytes,5,opt,name=token_hdl,json=tokenHdl,proto3" json:"token_hdl,omitempty"`
	NfType           string   `protobuf:"bytes,6,opt,name=nf_type,json=nfType,proto3" json:"nf_type,omitempty"`
	NfInstanceId     string   `protobuf:"bytes,7,opt,name=nf_instance_id,json=nfInstanceId,proto3" json:"nf_instance_id,omitempty"`
	Scope            []string `protobuf:"bytes,8,rep,name=scope,proto3" json:"scope,omitempty"`
	Snssais          []*Nssai `protobuf:"bytes,9,rep,name=snssais,proto3" json:"snssais,omitempty"`
	NsiList          []string `protobuf:"bytes,10,rep,name=nsi_list,json=nsiList,proto3" json:"nsi_list,omitempty"`
	NfSetIdList      []string `protobuf:"bytes,11,rep,name=nf_set_id_list,json=nfSetIdList,proto3" json:"nf_set_id_list,omitempty"`
}

func (x *R16Inbound) Reset() {
	*x = R16Inbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *R16Inbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*R16Inbound) ProtoMessage() {}

func (x *R16Inbound) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use R16Inbound.ProtoReflect.Descriptor instead.
func (*R16Inbound) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescGZIP(), []int{0}
}

func (x *R16Inbound) GetReqTimeout() uint32 {
	if x != nil {
		return x.ReqTimeout
	}
	return 0
}

func (x *R16Inbound) GetMsgRetry() uint32 {
	if x != nil {
		return x.MsgRetry
	}
	return 0
}

func (x *R16Inbound) GetMsgRetryCodeList() []string {
	if x != nil {
		return x.MsgRetryCodeList
	}
	return nil
}

func (x *R16Inbound) GetJwkFqdn() string {
	if x != nil {
		return x.JwkFqdn
	}
	return ""
}

func (x *R16Inbound) GetTokenHdl() string {
	if x != nil {
		return x.TokenHdl
	}
	return ""
}

func (x *R16Inbound) GetNfType() string {
	if x != nil {
		return x.NfType
	}
	return ""
}

func (x *R16Inbound) GetNfInstanceId() string {
	if x != nil {
		return x.NfInstanceId
	}
	return ""
}

func (x *R16Inbound) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *R16Inbound) GetSnssais() []*Nssai {
	if x != nil {
		return x.Snssais
	}
	return nil
}

func (x *R16Inbound) GetNsiList() []string {
	if x != nil {
		return x.NsiList
	}
	return nil
}

func (x *R16Inbound) GetNfSetIdList() []string {
	if x != nil {
		return x.NfSetIdList
	}
	return nil
}

type Nssai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sst uint32 `protobuf:"varint,1,opt,name=sst,proto3" json:"sst,omitempty"`
	Sd  string `protobuf:"bytes,2,opt,name=sd,proto3" json:"sd,omitempty"`
}

func (x *Nssai) Reset() {
	*x = Nssai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nssai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nssai) ProtoMessage() {}

func (x *Nssai) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nssai.ProtoReflect.Descriptor instead.
func (*Nssai) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescGZIP(), []int{1}
}

func (x *Nssai) GetSst() uint32 {
	if x != nil {
		return x.Sst
	}
	return 0
}

func (x *Nssai) GetSd() string {
	if x != nil {
		return x.Sd
	}
	return ""
}

type R16Outbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqTimeout       uint32   `protobuf:"varint,1,opt,name=req_timeout,json=reqTimeout,proto3" json:"req_timeout,omitempty"`
	MsgRetry         uint32   `protobuf:"varint,2,opt,name=msg_retry,json=msgRetry,proto3" json:"msg_retry,omitempty"`
	MsgRetryCodeList []string `protobuf:"bytes,3,rep,name=msg_retry_code_list,json=msgRetryCodeList,proto3" json:"msg_retry_code_list,omitempty"`
	IwkFqdn          string   `protobuf:"bytes,4,opt,name=iwk_fqdn,json=iwkFqdn,proto3" json:"iwk_fqdn,omitempty"`
	ServiceFqdn      string   `protobuf:"bytes,5,opt,name=service_fqdn,json=serviceFqdn,proto3" json:"service_fqdn,omitempty"`
	TokenFqdn        string   `protobuf:"bytes,6,opt,name=token_fqdn,json=tokenFqdn,proto3" json:"token_fqdn,omitempty"`
	UsedToken        bool     `protobuf:"varint,7,opt,name=used_token,json=usedToken,proto3" json:"used_token,omitempty"`
	NfType           string   `protobuf:"bytes,8,opt,name=nf_type,json=nfType,proto3" json:"nf_type,omitempty"`
	NfInstanceId     string   `protobuf:"bytes,9,opt,name=nf_instance_id,json=nfInstanceId,proto3" json:"nf_instance_id,omitempty"`
	AuthorityFlag    bool     `protobuf:"varint,10,opt,name=authority_flag,json=authorityFlag,proto3" json:"authority_flag,omitempty"`
}

func (x *R16Outbound) Reset() {
	*x = R16Outbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *R16Outbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*R16Outbound) ProtoMessage() {}

func (x *R16Outbound) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use R16Outbound.ProtoReflect.Descriptor instead.
func (*R16Outbound) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescGZIP(), []int{2}
}

func (x *R16Outbound) GetReqTimeout() uint32 {
	if x != nil {
		return x.ReqTimeout
	}
	return 0
}

func (x *R16Outbound) GetMsgRetry() uint32 {
	if x != nil {
		return x.MsgRetry
	}
	return 0
}

func (x *R16Outbound) GetMsgRetryCodeList() []string {
	if x != nil {
		return x.MsgRetryCodeList
	}
	return nil
}

func (x *R16Outbound) GetIwkFqdn() string {
	if x != nil {
		return x.IwkFqdn
	}
	return ""
}

func (x *R16Outbound) GetServiceFqdn() string {
	if x != nil {
		return x.ServiceFqdn
	}
	return ""
}

func (x *R16Outbound) GetTokenFqdn() string {
	if x != nil {
		return x.TokenFqdn
	}
	return ""
}

func (x *R16Outbound) GetUsedToken() bool {
	if x != nil {
		return x.UsedToken
	}
	return false
}

func (x *R16Outbound) GetNfType() string {
	if x != nil {
		return x.NfType
	}
	return ""
}

func (x *R16Outbound) GetNfInstanceId() string {
	if x != nil {
		return x.NfInstanceId
	}
	return ""
}

func (x *R16Outbound) GetAuthorityFlag() bool {
	if x != nil {
		return x.AuthorityFlag
	}
	return false
}

type R15Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndPointPort     uint32   `protobuf:"varint,1,opt,name=end_point_port,json=endPointPort,proto3" json:"end_point_port,omitempty"`
	ScpProcFqdn      string   `protobuf:"bytes,2,opt,name=scp_proc_fqdn,json=scpProcFqdn,proto3" json:"scp_proc_fqdn,omitempty"`
	ReqTimeout       uint32   `protobuf:"varint,3,opt,name=req_timeout,json=reqTimeout,proto3" json:"req_timeout,omitempty"`
	MsgRetry         uint32   `protobuf:"varint,4,opt,name=msg_retry,json=msgRetry,proto3" json:"msg_retry,omitempty"`
	MsgRetryCodeList []string `protobuf:"bytes,5,rep,name=msg_retry_code_list,json=msgRetryCodeList,proto3" json:"msg_retry_code_list,omitempty"`
}

func (x *R15Gateway) Reset() {
	*x = R15Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *R15Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*R15Gateway) ProtoMessage() {}

func (x *R15Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use R15Gateway.ProtoReflect.Descriptor instead.
func (*R15Gateway) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescGZIP(), []int{3}
}

func (x *R15Gateway) GetEndPointPort() uint32 {
	if x != nil {
		return x.EndPointPort
	}
	return 0
}

func (x *R15Gateway) GetScpProcFqdn() string {
	if x != nil {
		return x.ScpProcFqdn
	}
	return ""
}

func (x *R15Gateway) GetReqTimeout() uint32 {
	if x != nil {
		return x.ReqTimeout
	}
	return 0
}

func (x *R15Gateway) GetMsgRetry() uint32 {
	if x != nil {
		return x.MsgRetry
	}
	return 0
}

func (x *R15Gateway) GetMsgRetryCodeList() []string {
	if x != nil {
		return x.MsgRetryCodeList
	}
	return nil
}

var File_envoy_extensions_filters_http_scp_v3_config_proto protoreflect.FileDescriptor

var file_envoy_extensions_filters_http_scp_v3_config_proto_rawDesc = []byte{
	0x0a, 0x31, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x73, 0x63, 0x70, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x24, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x73, 0x63, 0x70, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x75, 0x64, 0x70, 0x61, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x03, 0x0a, 0x0a, 0x52, 0x31, 0x36, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x68, 0x64, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x64, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x66, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x66, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x07, 0x73, 0x6e, 0x73, 0x73, 0x61, 0x69, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e,
	0x73, 0x63, 0x70, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x73, 0x73, 0x61, 0x69, 0x52, 0x07, 0x73, 0x6e,
	0x73, 0x73, 0x61, 0x69, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x73, 0x69, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x73, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0e, 0x6e, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x66, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x05, 0x4e, 0x73, 0x73, 0x61, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x64,
	0x22, 0xdc, 0x02, 0x0a, 0x0b, 0x52, 0x31, 0x36, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x2d,
	0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x73, 0x67,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x77, 0x6b, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x77, 0x6b, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x66, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x66, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0xc3, 0x01, 0x0a, 0x0a, 0x52, 0x31, 0x35, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x70,
	0x50, 0x72, 0x6f, 0x63, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x73,
	0x67, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x4b, 0x0a, 0x32, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x73, 0x63, 0x70, 0x2e, 0x76, 0x33, 0x42, 0x0b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02,
	0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescData = file_envoy_extensions_filters_http_scp_v3_config_proto_rawDesc
)

func file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescData)
	})
	return file_envoy_extensions_filters_http_scp_v3_config_proto_rawDescData
}

var file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_envoy_extensions_filters_http_scp_v3_config_proto_goTypes = []interface{}{
	(*R16Inbound)(nil),  // 0: envoy.extensions.filters.http.scp.v3.R16Inbound
	(*Nssai)(nil),       // 1: envoy.extensions.filters.http.scp.v3.Nssai
	(*R16Outbound)(nil), // 2: envoy.extensions.filters.http.scp.v3.R16Outbound
	(*R15Gateway)(nil),  // 3: envoy.extensions.filters.http.scp.v3.R15Gateway
}
var file_envoy_extensions_filters_http_scp_v3_config_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.filters.http.scp.v3.R16Inbound.snssais:type_name -> envoy.extensions.filters.http.scp.v3.Nssai
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_scp_v3_config_proto_init() }
func file_envoy_extensions_filters_http_scp_v3_config_proto_init() {
	if File_envoy_extensions_filters_http_scp_v3_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*R16Inbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nssai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*R16Outbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*R15Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_extensions_filters_http_scp_v3_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_scp_v3_config_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_scp_v3_config_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_http_scp_v3_config_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_scp_v3_config_proto = out.File
	file_envoy_extensions_filters_http_scp_v3_config_proto_rawDesc = nil
	file_envoy_extensions_filters_http_scp_v3_config_proto_goTypes = nil
	file_envoy_extensions_filters_http_scp_v3_config_proto_depIdxs = nil
}
