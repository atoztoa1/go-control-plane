// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/config/filter/http/scp/v2alpha/config.proto

package envoy_config_filter_http_scp_v2alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on R16Inbound with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *R16Inbound) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReqTimeout

	// no validation rules for MsgRetry

	// no validation rules for JwkFqdn

	// no validation rules for TokenHdl

	// no validation rules for NfType

	// no validation rules for NfInstanceId

	for idx, item := range m.GetSnssais() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return R16InboundValidationError{
					field:  fmt.Sprintf("Snssais[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// R16InboundValidationError is the validation error returned by
// R16Inbound.Validate if the designated constraints aren't met.
type R16InboundValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e R16InboundValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e R16InboundValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e R16InboundValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e R16InboundValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e R16InboundValidationError) ErrorName() string { return "R16InboundValidationError" }

// Error satisfies the builtin error interface
func (e R16InboundValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sR16Inbound.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = R16InboundValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = R16InboundValidationError{}

// Validate checks the field values on Nssai with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Nssai) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sst

	// no validation rules for Sd

	return nil
}

// NssaiValidationError is the validation error returned by Nssai.Validate if
// the designated constraints aren't met.
type NssaiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NssaiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NssaiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NssaiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NssaiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NssaiValidationError) ErrorName() string { return "NssaiValidationError" }

// Error satisfies the builtin error interface
func (e NssaiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNssai.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NssaiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NssaiValidationError{}

// Validate checks the field values on R16Outbound with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *R16Outbound) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReqTimeout

	// no validation rules for MsgRetry

	// no validation rules for IwkFqdn

	// no validation rules for ServiceFqdn

	// no validation rules for TokenFqdn

	// no validation rules for UsedToken

	// no validation rules for NfType

	// no validation rules for NfInstanceId

	// no validation rules for AuthorityFlag

	return nil
}

// R16OutboundValidationError is the validation error returned by
// R16Outbound.Validate if the designated constraints aren't met.
type R16OutboundValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e R16OutboundValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e R16OutboundValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e R16OutboundValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e R16OutboundValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e R16OutboundValidationError) ErrorName() string { return "R16OutboundValidationError" }

// Error satisfies the builtin error interface
func (e R16OutboundValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sR16Outbound.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = R16OutboundValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = R16OutboundValidationError{}

// Validate checks the field values on R15Gateway with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *R15Gateway) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EndPointPort

	// no validation rules for ScpProcFqdn

	// no validation rules for ReqTimeout

	// no validation rules for MsgRetry

	return nil
}

// R15GatewayValidationError is the validation error returned by
// R15Gateway.Validate if the designated constraints aren't met.
type R15GatewayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e R15GatewayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e R15GatewayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e R15GatewayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e R15GatewayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e R15GatewayValidationError) ErrorName() string { return "R15GatewayValidationError" }

// Error satisfies the builtin error interface
func (e R15GatewayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sR15Gateway.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = R15GatewayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = R15GatewayValidationError{}
